//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppGroupe2.ServicePatient {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/MetierRvMedical.Model")]
    [System.SerializableAttribute()]
    public partial class Patient : AppGroupe2.ServicePatient.Personne {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateNaissanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupeSanguinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> PoidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<float> TailleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateNaissance {
            get {
                return this.DateNaissanceField;
            }
            set {
                if ((this.DateNaissanceField.Equals(value) != true)) {
                    this.DateNaissanceField = value;
                    this.RaisePropertyChanged("DateNaissance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupeSanguin {
            get {
                return this.GroupeSanguinField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupeSanguinField, value) != true)) {
                    this.GroupeSanguinField = value;
                    this.RaisePropertyChanged("GroupeSanguin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> Poids {
            get {
                return this.PoidsField;
            }
            set {
                if ((this.PoidsField.Equals(value) != true)) {
                    this.PoidsField = value;
                    this.RaisePropertyChanged("Poids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<float> Taille {
            get {
                return this.TailleField;
            }
            set {
                if ((this.TailleField.Equals(value) != true)) {
                    this.TailleField = value;
                    this.RaisePropertyChanged("Taille");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Personne", Namespace="http://schemas.datacontract.org/2004/07/MetierRvMedical.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(AppGroupe2.ServicePatient.Patient))]
    public partial class Personne : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdresseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomPrenomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adresse {
            get {
                return this.AdresseField;
            }
            set {
                if ((object.ReferenceEquals(this.AdresseField, value) != true)) {
                    this.AdresseField = value;
                    this.RaisePropertyChanged("Adresse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdU {
            get {
                return this.IdUField;
            }
            set {
                if ((this.IdUField.Equals(value) != true)) {
                    this.IdUField = value;
                    this.RaisePropertyChanged("IdU");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NomPrenom {
            get {
                return this.NomPrenomField;
            }
            set {
                if ((object.ReferenceEquals(this.NomPrenomField, value) != true)) {
                    this.NomPrenomField = value;
                    this.RaisePropertyChanged("NomPrenom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tel {
            get {
                return this.TelField;
            }
            set {
                if ((object.ReferenceEquals(this.TelField, value) != true)) {
                    this.TelField = value;
                    this.RaisePropertyChanged("Tel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServicePatient.IIPatient")]
    public interface IIPatient {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/GetListePatients", ReplyAction="http://tempuri.org/IIPatient/GetListePatientsResponse")]
        AppGroupe2.ServicePatient.Patient[] GetListePatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/GetListePatients", ReplyAction="http://tempuri.org/IIPatient/GetListePatientsResponse")]
        System.Threading.Tasks.Task<AppGroupe2.ServicePatient.Patient[]> GetListePatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/AddPatient", ReplyAction="http://tempuri.org/IIPatient/AddPatientResponse")]
        bool AddPatient(AppGroupe2.ServicePatient.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/AddPatient", ReplyAction="http://tempuri.org/IIPatient/AddPatientResponse")]
        System.Threading.Tasks.Task<bool> AddPatientAsync(AppGroupe2.ServicePatient.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/UpdatePatient", ReplyAction="http://tempuri.org/IIPatient/UpdatePatientResponse")]
        bool UpdatePatient(AppGroupe2.ServicePatient.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/UpdatePatient", ReplyAction="http://tempuri.org/IIPatient/UpdatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientAsync(AppGroupe2.ServicePatient.Patient patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/SupprimerPatient", ReplyAction="http://tempuri.org/IIPatient/SupprimerPatientResponse")]
        void SupprimerPatient(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/SupprimerPatient", ReplyAction="http://tempuri.org/IIPatient/SupprimerPatientResponse")]
        System.Threading.Tasks.Task SupprimerPatientAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/GetPatientById", ReplyAction="http://tempuri.org/IIPatient/GetPatientByIdResponse")]
        AppGroupe2.ServicePatient.Patient GetPatientById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIPatient/GetPatientById", ReplyAction="http://tempuri.org/IIPatient/GetPatientByIdResponse")]
        System.Threading.Tasks.Task<AppGroupe2.ServicePatient.Patient> GetPatientByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIPatientChannel : AppGroupe2.ServicePatient.IIPatient, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IPatientClient : System.ServiceModel.ClientBase<AppGroupe2.ServicePatient.IIPatient>, AppGroupe2.ServicePatient.IIPatient {
        
        public IPatientClient() {
        }
        
        public IPatientClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IPatientClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IPatientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IPatientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AppGroupe2.ServicePatient.Patient[] GetListePatients() {
            return base.Channel.GetListePatients();
        }
        
        public System.Threading.Tasks.Task<AppGroupe2.ServicePatient.Patient[]> GetListePatientsAsync() {
            return base.Channel.GetListePatientsAsync();
        }
        
        public bool AddPatient(AppGroupe2.ServicePatient.Patient patient) {
            return base.Channel.AddPatient(patient);
        }
        
        public System.Threading.Tasks.Task<bool> AddPatientAsync(AppGroupe2.ServicePatient.Patient patient) {
            return base.Channel.AddPatientAsync(patient);
        }
        
        public bool UpdatePatient(AppGroupe2.ServicePatient.Patient patient) {
            return base.Channel.UpdatePatient(patient);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientAsync(AppGroupe2.ServicePatient.Patient patient) {
            return base.Channel.UpdatePatientAsync(patient);
        }
        
        public void SupprimerPatient(int id) {
            base.Channel.SupprimerPatient(id);
        }
        
        public System.Threading.Tasks.Task SupprimerPatientAsync(int id) {
            return base.Channel.SupprimerPatientAsync(id);
        }
        
        public AppGroupe2.ServicePatient.Patient GetPatientById(int id) {
            return base.Channel.GetPatientById(id);
        }
        
        public System.Threading.Tasks.Task<AppGroupe2.ServicePatient.Patient> GetPatientByIdAsync(int id) {
            return base.Channel.GetPatientByIdAsync(id);
        }
    }
}
